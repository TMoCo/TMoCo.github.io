---
layout: portfolio_entry
title:  "Terrain Rendering"
titlePicture:  "/assets/TerrainRendering.png"
permalink: "/Vulkan_Terrain_Rendering/"
repo: "HPGA2TerrainRendering"
order: 5
excerpt: An application for rendering terrain from height maps with optimizations such as view based culling, written in C++ with the Vulkan API.
---
<!-- code highlights -->
{%- assign vertex_shader = "int id = gl_VertexIndex;
int row = id / mapSize;
int col = id / mapSize;
vec2 uv = vec2(row / (float)mapSize, col / (float)mapSize);
vec3 position = vec3(
     row - mapSize / 2.0f,
     texture(heightSampler, uv),
     col - mapSize / 2.0f);"-%}

<!-- main content -->
{% include captioned_image.html src='assets/TerrainRendering.png' alt='Flight sim and terrain render' caption='Flight simulator to navigate around the terrain' %}

The goal of this coursework was to explore terrain rendering though the Vulkan API. The terrain is generated by reading values from a grayscale height map and using them as the Y value of vertices in an XZ plane.\
Interestingly, {% include inline.yml code='gl_VertexIndex' ext='cpp' %} can be used to bypass the need to send vertex data to the GPU by invoking {% include inline.yml code='VkCmdDraw' ext='cpp' %} or {% include inline.yml code='VkCmdDrawIndexed' ext='cpp' %} without binding a vertex buffer.

{% include highlight.html ext='glsl' caption='Computing vertex data from vertex index in GLSL' code=vertex_shader %}
A typical optimisation for terrain rendering is to apply binning to the terrain, i.e separating sections of it into bins, and only rendering those visible. I opted to divide the terrain into even sections and use the dot product of the bin's midpoint with the camera's view direction.

{% include captioned_image.html src='assets/BinnedTerrain.gif' alt='Terrain binning' caption='Terrain bins culled based on view direction' %}

This was sufficient for the coursework but is not ideal (enter kd-trees, LOD tesselation on the GPU...). I hope to revisit this project and explore more terrain rendering techniques with my improved C++ and Vulkan knowledge.
